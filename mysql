1. round(N, D):
* N: A number which will be rounded upto D decimal places.

2. CASE WHEN ... THEN...    WHEN ... THEN .... ELSE... END
SELECT CASE WHEN A+B>C AND B+C>A AND A+C>B
THEN
    CASE WHEN A=B AND B=C THEN 'Equilateral'
        WHEN A=B OR B=C OR C=A THEN 'Isosceles'
        WHEN A!=B AND B!=C AND C!=A THEN 'Scalene' END
    ELSE 'Not A Triangle' END
FROM TRIANGLES;

3. Get the average of a variable:
AVG(cloumn_name)

4. 
SELECT CONCAT('There are a total of ', COUNT(*), ' ', LOWER(OCCUPATION), 's.')
FROM OCCUPATIONS
GROUP BY OCCUPATION
ORDER BY COUNT(NAME) ASC, OCCUPATION ASC;

5. 
SELECT CONCAT(NAME, '(',SUBSTR(OCCUPATION, 1, 1), ')')
FROM OCCUPATIONS
ORDER BY NAME ASC;

6.
SET @R1 = 0, @R2 = 0, @R3 = 0, @R4 = 0;
SELECT MAX(Doctor), MAX(Professor), MAX(Singer), MAX(Actor)
FROM
(SELECT CASE WHEN OCCUPATION = 'Doctor' THEN (@R1:=@R1+1)
WHEN OCCUPATION = 'Professor' THEN (@R2:=@R2+1)
WHEN OCCUPATION = 'Singer' THEN (@R3:=@R3+1)
WHEN OCCUPATION = 'Actor' THEN (@R4:=@R4+1) END AS RowNumber,
CASE WHEN OCCUPATION = 'Doctor' THEN NAME END AS Doctor,
CASE WHEN OCCUPATION = 'Professor' THEN NAME END AS Professor,
CASE WHEN OCCUPATION = 'Singer' THEN NAME END AS Singer,
CASE WHEN OCCUPATION = 'Actor' THEN NAME END AS Actor
FROM OCCUPATIONS
ORDER BY NAME ASC) Temp
GROUP BY RowNumber;

(1) set @r2 = 0    ==> User defined variable;
(2) The code aggregate rows together using GROUP BY RowNumber and MAX(or Min) statement:
MIN()/MAX() will return a name for specific index and specific occupation. If there is a name, they wiil return it. 
If there is not, they will return a NULL.

7. You can combine CASE logistic and subquery together!
SELECT N, CASE WHEN P IS NULL THEN 'Root' 
WHEN N IN (SELECT P FROM BST) THEN 'Inner' 
ELSE 'Leaf' END
FROM BST
ORDER BY N ASC;

8. query rows based on the information from two tables:
SELECT CITY.NAME
FROM CITY, COUNTRY
WHERE CITY.CountryCode = COUNTRY.Code AND CONTINENT = 'Africa';

SELECT CITY.NAME
FROM CITY INNER JOIN COUNTRY ON CountryCode = Code
WHERE CONTINENT = 'Africa';

9. calculate median with mysql: https://www.hackerrank.com/challenges/weather-observation-station-20/problem
SET @RowNum = 0;

SELECT ROUND(AVG(LAT_N), 4)
FROM(
    SELECT LAT_N, @RowNum:=@RowNum+1 AS ROWNUMBER, @Total:=@RowNum
    FROM STATION
    WHERE LAT_N IS NOT NULL
    ORDER BY LAT_N ASC) Temp
WHERE ROWNUMBER IN (FLOOR((@Total+1)/2), FLOOR((@Total+2)/2));

10. REPLACE():
SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) 
FROM EMPLOYEES;

11. GROUP BY 1
group by first column from SELECT

12. POWER(4, 2) ==> 4^2

13. SQRT() ==> Return the square root of the argument.

14. BETWEEN ... AND ... can also works like join to merge two tables:
SELECT (CASE WHEN GRADE >= 8 THEN NAME ELSE NULL END) AS NAME2, GRADE, STUDENTS.MARKS
FROM STUDENTS, GRADES
WHERE STUDENTS.MARKS BETWEEN GRADES.MIN_MARK AND GRADES.MAX_MARK
ORDER BY GRADE DESC, NAME2 ASC, STUDENTS.MARKS ASC;

15. prime number from 1 to 1000:
https://www.hackerrank.com/challenges/print-prime-numbers/problem
SET @potential_prime = 1;
SET @divisor = 1;

SELECT GROUP_CONCAT(POTENTIAL_PRIME SEPARATOR '&') FROM
    (SELECT @potential_prime := @potential_prime + 1 AS POTENTIAL_PRIME FROM
    information_schema.tables t1,
    information_schema.tables t2
    LIMIT 1000) list_of_potential_primes
WHERE NOT EXISTS(
	SELECT * FROM
        (SELECT @divisor := @divisor + 1 AS DIVISOR FROM
	    information_schema.tables t4,
        information_schema.tables t5
	    LIMIT 1000) list_of_divisors
	WHERE MOD(POTENTIAL_PRIME, DIVISOR) = 0 AND POTENTIAL_PRIME <> DIVISOR);

16. pay attention to the useage of 'having':
SELECT hackers.hacker_id, hackers.name
FROM submissions, hackers, challenges, difficulty
WHERE submissions.hacker_id = hackers.hacker_id
AND submissions.challenge_id = challenges.challenge_id
AND submissions.score = difficulty.score 
AND challenges.difficulty_level = difficulty.difficulty_level
GROUP BY hackers.hacker_id, hackers.name
HAVING COUNT(hackers.hacker_id) > 1
ORDER BY COUNT(submissions.hacker_id) DESC, submissions.hacker_id ASC;

17. pay attention to the useage of 'having':
select challenges.hacker_id, hackers.name, count(challenges.hacker_id) as total
from hackers, challenges
where hackers.hacker_id = challenges.hacker_id
group by challenges.hacker_id, hackers.name
having total = (select max(total_count)
               from (select count(challenge_id) as total_count
                    from challenges
                    group by hacker_id) max_total)
or total in (select * from (select count(challenge_id) as total_count
                    from challenges
                    group by hacker_id )temp
            group by total_count
            having count(total_count)=1) 
order by total desc, hacker_id;
                        
18.
select wands.id, temp.age, temp.min_coins_needed, temp.power
from wands, wands_property, 
(select wands_property.age, min(wands.coins_needed) as min_coins_needed, wands.power
from wands, wands_property 
where wands.code = wands_property.code
and wands_property.is_evil != 1
group by wands_property.age, wands.power) temp
where temp.power = wands.power 
and wands.coins_needed = temp.min_coins_needed
and wands.code = wands_property.code
and temp.age = wands_property.age
order by temp.power desc, temp.age desc;

19. Contest Leaderboard
select temp.hacker_id, hackers.name, sum(temp.max_score) as total_score
from hackers, (
    select hacker_id, challenge_id, max(score) as max_score
    from Submissions
    group by hacker_id, challenge_id
    having max(score) > 0) temp
where temp.hacker_id = hackers.hacker_id
group by temp.hacker_id, hackers.name
order by total_score desc, hacker_id asc;

20. Projects:
https://www.hackerrank.com/challenges/projects/problem
SELECT start_date, MIN(end_date)
FROM 
    (SELECT start_date FROM PROJECTS WHERE start_date NOT IN (SELECT end_date FROM PROJECTS)) a,
    (SELECT end_date FROM PROJECTS WHERE end_date NOT IN (SELECT start_date FROM PROJECTS)) b
where start_date < end_date
GROUP BY start_date
ORDER BY DATEDIFF(MIN(end_date), start_date), start_date

21.Draw The Triangle 1:
https://www.hackerrank.com/challenges/draw-the-triangle-1/problem
* * * * * 
* * * * 
* * * 
* * 
*
set @NUMBER:=21; 
SELECT REPEAT('* ', @NUMBER := @NUMBER - 1) 
FROM information_schema.tables;

22.Draw The Triangle 2:
https://www.hackerrank.com/challenges/draw-the-triangle-2/problem?h_r=next-challenge&h_v=zen
* 
* * 
* * * 
* * * * 
* * * * *
set @number := 0;
select repeat('* ', @number := @number + 1) 
from information_schema.tables 
where @number < 20;
